# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10JXAf8esaboVhKmBYxvnmIYWxLxa3sGE
"""

import streamlit as st
import fitz  # PyMuPDF for PDF text extraction
import torch
from transformers import pipeline
from sentence_transformers import SentenceTransformer, util
import textwrap

# Load models
qa_pipeline = pipeline("question-answering", model="deepset/roberta-base-squad2")
embedding_model = SentenceTransformer("all-MiniLM-L6-v2")

# Function to extract and chunk text from a PDF file
def extract_text_from_pdf(uploaded_file, chunk_size=512):
    doc = fitz.open(stream=uploaded_file.read(), filetype="pdf")

    # Combine all pages into a single text string
    full_text = " ".join([page.get_text("text") for page in doc])

    # Split text into manageable chunks (512 tokens per chunk)
    chunks = textwrap.wrap(full_text, width=chunk_size)
    return chunks  # Returns a list of text chunks

# Function to find the most relevant text chunk
def find_most_relevant_chunk(question, text_chunks):
    question_embedding = embedding_model.encode(question, convert_to_tensor=True)
    chunk_embeddings = [embedding_model.encode(chunk, convert_to_tensor=True) for chunk in text_chunks]

    # Compute cosine similarity
    similarities = [util.pytorch_cos_sim(question_embedding, chunk)[0].item() for chunk in chunk_embeddings]

    # Find the most relevant chunk (highest similarity)
    best_chunk_idx = similarities.index(max(similarities))
    return text_chunks[best_chunk_idx]

# Function to get the answer from the relevant text
def answer_question_from_pdf(pdf_file, question):
    text_chunks = extract_text_from_pdf(pdf_file)  # Extract and chunk text
    relevant_chunk = find_most_relevant_chunk(question, text_chunks)  # Find best chunk

    # Use QA Model to extract answer
    result = qa_pipeline(question=question, context=relevant_chunk)
    return result["answer"]

# Streamlit UI
st.title("Question Answering System")
st.write("Upload a PDF and ask a question")

uploaded_file = st.file_uploader("Upload a PDF", type=["pdf"])
question = st.text_input("Enter your question:")

if uploaded_file and question:
    st.write("Processing the question")
    answer = answer_question_from_pdf(uploaded_file, question)
    st.success(f"**Answer:** {answer}")